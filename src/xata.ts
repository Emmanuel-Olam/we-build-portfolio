// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "projects",
    columns: [
      { name: "title", type: "string", unique: true },
      { name: "description", type: "text" },
      { name: "image", type: "string" },
      { name: "link", type: "string" },
      { name: "status", type: "string" },
      { name: "kind", type: "string" },
    ],
  },
  {
    name: "reviews",
    columns: [
      { name: "name", type: "string" },
      { name: "body", type: "text" },
      { name: "image", type: "string" },
      { name: "project", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Projects = InferredTypes["projects"];
export type ProjectsRecord = Projects & XataRecord;

export type Reviews = InferredTypes["reviews"];
export type ReviewsRecord = Reviews & XataRecord;

export type DatabaseSchema = {
  projects: ProjectsRecord;
  reviews: ReviewsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Ayanwola-Ayomide-s-workspace-rf6f4c.us-east-1.xata.sh/db/we-build-db",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
